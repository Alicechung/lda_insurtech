Analytics infrastructure: Designing the master patient index

October 02, 2014

By Sponsored Content
October 02, 2014 - In the last article of this series, we discussed the power of an effective data connector and several important considerations that must go into a robust extract-transfer-load process. What we, along with others who capture large amounts of multi-sourced, heterogeneous data have discovered, is that one very crucial element doesn’t come to fruition easily with that data: Identity.
In this article, we will look at the world as seen through the Master Person Index (MPI) and explore a few critical considerations that go into designing a tool that must look through what you are to see who you are.
Why MPI?
John Smith arrives at the registration desk. Does he know his medical record number? He was a patient several years ago; now he’s back and you’d like to find him in the system. If he’s in there… and there was a changeover in the software years ago, and…
Therein lays the historical basis for the MPI. Originally, the Enterprise MPI (EMPI) was needed for real-time interactions with appointment, billing and other systems, just to identify the individual standing in front of you. Of course, record standardization can always be rocky, and the growth of mergers and acquisitions meant more integration of systems with different identification schemes.
READ MORE: With New Players Looming, Healthcare Needs Big Data to Support Scale
Today, MPIs go far beyond the manual, real-time requirement, to a far broader set of needs for system stability.
Intra-system: The need to find (or confirm the absence of) an individual in the system. There may be multiple records for this same person. There may also be other individuals with very similar information. The former represents duplicate records that should be treated as the same individual. The latter refers to confounding matches, which make it difficult to identify the correct individual.
Inter-system: The need to align individuals across multiple systems. The systems can be similar (horizontal), such as multiple Electronic Health Records (EHRs) at different centers, or they can be complementary (vertical), such as EHRs communicating with claims, billing, and appointments management systems. Different formats or schemas must be represented, and the presence or absence of a specific identity in any system may not be known a priori.
More than a number
Of course, this predicament wouldn’t be a reality if everyone had a universal healthcare ID number (UID), which isn’t an impossible feat.
READ MORE: Will Big Data Analytics Rescue Lackluster Electronic Health Records?
Starting in 2008, all members of the United Kingdom’s National Health System (NHS) were required to start using patients’ NHS ID numbers as their unique identifiers. And, starting this year, all providers funded by NHS will be required to use the NHS ID, as well. As a result, individuals can be unambiguously associated with their medical record and care history, whether tabulating a bill or amputating a toe.
Why not in the United States? At a health policy meeting last year on interoperability in Washington, D.C., my fellow attendees and I were coached to call on our representatives and ask – plead – for interoperability and universal identification standards. However, we were instructed, upon peril to our souls, to not bring up the concept of a National ID with anyone, especially lawmakers. Yes, it would be revolutionary for the delivery and analysis of healthcare, but the UID is a Third Rail that makes the proverbial Third Rail look like a game of Operation.
So MPI is a necessity, but how to do it?
What’s in a name?
There is an array of issues complicating identity resolution, ranging from identical twins to commonalities in data points. To demonstrate the intricacies of developing an MPI, consider the following scenarios:
READ MORE: Healthcare CIOs Turning to Data Analytics for Business Intelligence
Identical Twins: Identical twins have the same birthdate and sex and typically have the same last name, at least as children. They also may live near each other, or even have the same address. A study of online resources suggests that twins are also frequently, adorably, and problematically assigned similar first names, ranging from the same first letter (“Jacob”, “Joshua”) to almost the entire name (“Jada”, “Jade”). The likelihood of a transcription error aside, an MPI employing even the fuzziest logic will have a hard time distinguishing Jada and Jade Smith, both females, born on the same date, and living at the same address.
The Birthday Problem: How likely is it for two people in a group to have the same birthday? If there are only two people to choose from, it’s a 99.7 percent likelihood that they have different birthdays (i.e. month and day). If there are five people, there’s still only a 3 percent chance that any of them share a birthday. However, as the numbers increase, it becomes more likely that at least two members of any group have the same birthday. Indeed, as soon as you have 23 people together, there is a greater than 50 percent chance that at least two of them share a birthday, and that likelihood is 90 percent at 40 individuals.
Given a common name that clusters around sex, year of birth, and region, the odds are not small that you’ll end up with some distinct individuals sharing identical characteristics. While this may seem unlikely, there have been specific cases where 24 different women from the same area had the exact same name and year of birth. In this instance, there was more than a 50 percent chance for two of the 24 women to also share the exact same birth date.
Make me a match
When combining multiple disparate sources, composed of dozens or even hundreds of EHR systems and records referring to millions of individuals, the odds for identification are not in your favor. You will almost certainly have erroneous matches on even simple identifiers. Luckily, there are key identifiers that help to provide more accurate match-worthy data:
Sex / ZIP / Date of Birth: Together, these data points provide a high likelihood of correctly identifying an individual. In fact, they are at the center of the most classic cases of failed de-identification.
Social Security Number (SSN): The SSN is a terrific identifier when provided. It indicates an individual very specifically, such that when an SSN is present, two individuals bearing the same SSN really are likely to be the same person. Even when only the last four digits of the number are available, that still substantially decreases the likelihood of a mismatch between two otherwise similar individuals. The issue lies in the fact that there are a number of cases in which the SSN isn’t available. Some individuals don’t like to provide it, some organizations don’t like to collect it and some states restrict its use. Further, vulnerable populations such as migrant workers and undocumented immigrants may not have a SSN.
Cell Phone Number: In 2005, when individuals were given the right to transfer their phone numbers from one carrier to another, the cell phone number became as close as we may have to a unique identifier. For many individuals, the cell phone number rarely changes, and it is highly unlikely that the same ten-digit number will appear for two similar but distinct individuals. However, not every system collects cell phone numbers, not every organization makes use of them and many individuals are reluctant to share them. And, once again, vulnerable populations, including the poor, the elderly, and the transient are less likely to have a consistent cell phone number.
In the absence of a truly unique and consistent identifier, we are forced to look to a broader collection of data elements.
Tools of the trade
In addition to useful data elements, there are also tools to boost your MPI’s accuracy:
Decision trees can be a good starting point when creating a high-performing MPI. The decision tree simply indicates how many data elements must be matched (or unmatched) before making a decision. Consider the relatively simple decision tree in Figure 1. A simple MPI might optimize comparisons based on this tree. If SSNs match, it’s a match; no more comparisons. If not, move on to check last name and first name. If neither matches, it’s not a match and again, move on. If one or both match, there are more comparisons to be made. The goal is to stop making these comparisons as soon as logic dictates one way or the other. Most cases will result in an answer quickly, making such an MPI more efficient than one that always compares all identifiers.
Scoring takes the decision tree one step further by customizing the value of comparisons. Each data element matched gets a point, and as soon as a threshold is reached a match is declared or rejected. Scoring also allows one to create and re-balance weights to optimize MPI performance – a more challenging process when only using decision trees.
Normalizing or filtering applies commonplace choices to text fields. Some are as simple as replacing “St.”, “street”, and “st” with “STREET”, or identifying numbers after “#,” “Apt,” “Unit” and “No.” as an apartment designator.  City, state, and ZIP codes can be cross-checked to fix spelling and formatting and reverse-geocoding makes guessing missing ZIPs easier.
Fuzzy matching adds the option to identify close matches. This type of matching can range from simple to complex. For example, you can match transpositions by counting the number of similar letters or numbers. You can also bind together formal names with nicknames and diminutives to catch similarities (Michael, Mike and Mikey, for example).  You can match on similar sounds – homophones – that might garble names or addresses. You are also able to combine these features with advanced learning techniques – think natural language processing, adaptive/predictive analysis, genetic algorithms – not only to find possible matches, but also to more effectively rule them out.
With these tools, and an array of appropriate data elements, your organization is almost fully-prepped for successful identification.
Fine tuning
Imagine an MPI that identifies duplicates in an EHR patient roster, and also links records to a member file connected to a claims system. The MPI has 90 percent sensitivity and 99 percent specificity. The patient roster and member file each contain 10,000 records, but only 8,000 people are shared in both systems. And, let’s imagine that 0.01 percent of the records in the EHR roster are duplicates. In this scenario, an MPI might only fail to identify one duplicate record, but it would typically fail to join 800 of the shared records. If the  sensitivity is raised to 95 percent at the cost of dropping specificity to 95 percent,  another 400 of those shared records are now accurately joined, but another 400 more patient records are  erroneously marked as duplicates due to the reduced specificity.
If real matches are rare, then a high specificity is critical, since you don’t want to accidentally pick up several false positives. If real matches are frequent, a high sensitivity is important to avoid frequent false negatives. There is a trade-off between sensitivity and specificity that requires care and consideration.
From MPI to the uncanny perceiver
There are a number of steps and crucial considerations when putting together an MPI. Building your own can be quite the endeavor. Our MPI has grown thanks to years of experience and intellectual contributions, exploring the challenges outlined above, and many more that weren’t mentioned.
And yet, year after year, we continue to tweak and tune and improve, aspiring for our MPI the insight of that uncanny perceiver: the human mind.
Sure, we have an MPI that can link multiple data sources. But just because your data are collected in one warehouse doesn’t mean they’re working for you. Next time, we’ll discuss unleashing the real power of an integrated clinical/claims data warehouse.
Michael Simon, PhD, is a Principal Data Scientist at Arcadia Healthcare Solutions, with experience in data analytics, process efficiency, and experimental design. Since joining Arcadia in 2011, Michael has focused on demonstrating and enhancing value of client data through exploratory data analysis and advanced statistical methodologies, including in the development of Arcadia’s Launchpad platform. Michael earned a Bachelor of Science degree in Electrical Engineering and a Bachelor of
Arts degree in Economics from Rice University in Houston, Texas. Michael also received a PhD in Biology from Tufts University.
  Tagged Analytics InfrastructureBig DataHealthcare Business Intelligence


