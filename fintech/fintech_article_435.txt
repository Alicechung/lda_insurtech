Hashgraph: Taking Blockchain to the Next Generation

January 16, 2018

As published by Unblocked Events, Chain Reaction caught up with the Co-Founder of hashgraph and Swirlds, Mance Harmon, at the Blockchain World Conference in Bangkok to ask him what hashgraph is all about and how it may potentially fix some of the problems of existing blockchain technologies.

 There has been quite a bit of online chatter about hashgraph over the past couple of months since the project came out of stealth. Can you explain briefly what the hashgraph is and why the blockchain community are starting to take notice of it?

 As the name implies, hashgraph is not a blockchain but rather a graph, specifically a Directed Acyclic Graph (DAG). The question is what does that graph represent? Our technology is often compared with – or lumped into – the category of other DAG-based technologies. But beyond the aspect of us all having a graph, there is almost no comparison. In hashgraph, the graph represents the communications flow across the network. The graph reflects that A talked to B and C talked to D at a certain point in time. This happens by means of our gossip protocol, which is simply the most efficient way of passing information to a population or network. The hashgraph is a picture of the gossip that has taken place across the network in time. The directed part of the term ‘Directed Acyclic Graph’ simply means that the graph keeps going upwards and can’t loop backwards in time. ‘Gossip about gossip’ is so-called because it is a mechanism for sharing that data with friends, who then randomly share it with friends of friends. This tells the network participants what our picture of the graph looks like, so that everyone now has a picture of the same graph, sharing the most recent data, based on chains of trust. The final aspect of the process is a secure voting-based algorithm that exists because there is so much information in the hashgraph that we can instead calculate what the network would have voted so we all come to an agreed conclusion. We call it ‘virtual voting’ and it allows our network to generate a consensus, while maintaining the gossip protocol’s key properties of speed, decentralisation and security.

 As you mentioned in Bangkok, one of the key criticisms of existing blockchains is their inability to scale fast enough to meet demand. How does hashgraph attempt to solve that challenge?

Hashgraph is orders of magnitude faster in terms of latency and throughput than existing systems’ performance. You often read in publications someone saying their network can handle a million or a billion transactions per second but these statements are not really justifiable. In reality, these networks are made up of smaller subsets called shards. The real question is what is the throughput of the shard? The whole speed of the network could be limited by the throughput of a single shard, which could therefore put up a roadblock in the system. In terms of throughput and latency in a single shard, we expect to be the best in the market.

 Enterprises are becoming more and more alert to the applications of blockchain but they remain worried about hacking, data breaches etc. Is hashgraph secure?

 Enterprise customers typically don’t use blockchain technology as such but rather leader-based systems based on other consensus algorithms like Paxos, Raft or PBFT. Having a leader in your system architecture is a problem when it comes to security. Since every participant in the network knows the identity of the leader, if any single entity in that system (e.g. a bank) is compromised by either a bad actor or a virus or malware, for example, they can use a botnet to launch a Distributed Denial of Service (DDoS) attack against the leader and bring down the whole network. I am sceptical of the architecture of the current private consortia blockchains because they are not currently operating at bank-grade security. They are also hard to scale because their architecture is limited in throughput. Microsoft Azure’s Coco Framework is capped at 1000 transactions per second, as is the Enterprise Ethereum Alliance (EEA). Scaling is also hard in a leader-based architecture.

 What about fairness? You have discussed how ordering of transactions could be manipulated in other systems. What makes hashgraph different to them?

 If you don’t want a single party being able to manipulate the order of transactions then we also have to get away from leader-based systems. In permissionless blockchains, based on proof of work, you do have higher security than in permissioned systems because you can’t predict which miners will win the race to create the next block. But it is still not a fair system because that miner can decide not only whether a transaction goes into a block but can also dictate the order of those transactions. Hashgraph solves both fairness of access and fairness of ordering.

 Does hashgraph currently have any real-world implementations?

 Our first implementation to come to market is our work with the US Credit Union Industry. The National Credit Union Association (NCUA) and Mountain West Credit Union Association (MWCUA) incubated a project which has now become a credit union service organisation called CU Ledger. It serves the 6000 credit unions in the USA which collectively have 105 million members. I’m delighted to say that hashgraph outcompeted IBM’s Hyperledger to win this project.

 What do you see as the industries that are mostly likely to find use cases that are suited to hashgraph’s technology?

 Aside from the credit union project, there are certain markets that spring to mind where hashgraph’s fairness of transaction ordering is critical – we can think of the need to match bids and asks in financial services, or online gaming where what happens in order of time, – such as which party wins a fight in a multiplayer online battle arena game – is central. Gaming also needs high throughput and low latency as well as fairness, so it is very well-suited to being built on our platform. Another interesting use case is online auctions – so hashgraph could help in the creation, for example, of a distributed version of eBay. Ultimately, hashgraph works very well in supporting any application where chronology is key.

 What’s the story of how you became interested and involved in this technology on a personal level?

 My co-founder, Leemon Baird, has been exclusively working on hashgraph since 2012. I was formerly head of labs and architecture at Ping Identity. I first began to look at blockchain in the context of ID-related applications, like single sign-off, which are hard to solve. I was called in to see the CEO and offered a new job and a raise but instead I decided to pitch him on a different topic – investing in hashgraph. As I was presenting, he told me he had a “lightbulb moment” he has only ever had once before with Jabber. We ended up getting involved in hashgraph and the rest is history. It was one of those leaps of faith that are a risk but which entrepreneurs need to take sometimes to move things forward, create new opportunities and keep life interesting.

 If hashgraph were to leave a lasting legacy on society, what would that legacy be?

 I hope that our legacy will be that we fix the Internet for future generations. In its current state the Internet is fundamentally flawed and is not designed to be secure. Hashgraph is adding a trust layer on top of existing infrastructures that solves those problems and makes transacting on the Internet far more secure. The way that the Cloud works now means that users have to trust a single party – be it Google, PayPal or Facebook – but as we discussed previously the architecture of trusting a single party is flawed. With hashgraph, if you assume that at least two thirds of your community is honest, you’re OK. You could make the analogy that current Internet security is like breaking into a house surrounded by a fence and an alarm system – once you break through that fence and disable that alarm you’re inside. With the new technologies we are talking about, you’d need to break into multiple houses each with its own fence and alarm system, all around the world and all at exactly the same time. Or in other terms, we can say that now in a DDoS attack you can have 100,000 computers attacking one other computer, which is hard to defend. But in future distributed systems like hashgraph you have to distribute that attack across many computers. This is a fundamentally improved security system that has never existed before. We are creating a kind of ‘consensus server’ for different applications each of which represents a kind of shared world. The possibilities really are endless.

  


